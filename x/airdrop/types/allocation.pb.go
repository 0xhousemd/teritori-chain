// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nxtpop/airdrop/v1beta1/allocation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AirdropAllocation defines the user's airdrop allocation.
type AirdropAllocation struct {
	Chain         string                                 `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address       string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	ClaimedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=claimedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimedAmount"`
}

func (m *AirdropAllocation) Reset()         { *m = AirdropAllocation{} }
func (m *AirdropAllocation) String() string { return proto.CompactTextString(m) }
func (*AirdropAllocation) ProtoMessage()    {}
func (*AirdropAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_33f443a60d83adb6, []int{0}
}
func (m *AirdropAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropAllocation.Merge(m, src)
}
func (m *AirdropAllocation) XXX_Size() int {
	return m.Size()
}
func (m *AirdropAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropAllocation proto.InternalMessageInfo

func (m *AirdropAllocation) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *AirdropAllocation) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*AirdropAllocation)(nil), "nxtpop.airdrop.v1beta1.AirdropAllocation")
}

func init() {
	proto.RegisterFile("nxtpop/airdrop/v1beta1/allocation.proto", fileDescriptor_33f443a60d83adb6)
}

var fileDescriptor_33f443a60d83adb6 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x7e, 0x8a, 0xb0, 0xc4, 0x40, 0x54, 0xa1, 0xd0, 0xc1, 0x45, 0x0c, 0xc0, 0x52,
	0x5b, 0x15, 0x0b, 0x6b, 0x8b, 0x84, 0xc4, 0x44, 0x55, 0x98, 0x58, 0x90, 0xe3, 0x44, 0xa9, 0x45,
	0xe2, 0x1b, 0xd9, 0x2e, 0x2a, 0x6f, 0xc1, 0x63, 0x75, 0xec, 0x88, 0x18, 0x2a, 0x48, 0x5e, 0x04,
	0x35, 0x36, 0x11, 0xac, 0x4c, 0xf6, 0xf5, 0x39, 0xf7, 0x3b, 0xb6, 0x2f, 0x3e, 0x57, 0x0b, 0x5b,
	0x42, 0xc9, 0xb8, 0xd4, 0x89, 0x86, 0x92, 0xbd, 0x0c, 0xe3, 0xd4, 0xf2, 0x21, 0xe3, 0x79, 0x0e,
	0x82, 0x5b, 0x09, 0x8a, 0x96, 0x1a, 0x2c, 0x84, 0x47, 0xce, 0x48, 0xbd, 0x91, 0x7a, 0x63, 0xaf,
	0x9b, 0x41, 0x06, 0x8d, 0x85, 0x6d, 0x76, 0xce, 0xdd, 0x23, 0x02, 0x4c, 0x01, 0x86, 0xc5, 0xdc,
	0xa4, 0x2d, 0x53, 0x80, 0xf4, 0xb4, 0xde, 0xb1, 0xd3, 0x9f, 0x5c, 0xa3, 0x2b, 0x9c, 0x74, 0xfa,
	0x85, 0xf0, 0xe1, 0xc8, 0x85, 0x8c, 0xda, 0x4b, 0x84, 0x5d, 0xbc, 0x2b, 0x66, 0x5c, 0xaa, 0x08,
	0x9d, 0xa0, 0x8b, 0xfd, 0xa9, 0x2b, 0xc2, 0x08, 0xef, 0xf1, 0x24, 0xd1, 0xa9, 0x31, 0xd1, 0x56,
	0x73, 0xfe, 0x53, 0x86, 0x37, 0xb8, 0xc3, 0x0b, 0x98, 0x2b, 0x1b, 0x6d, 0x6f, 0x84, 0x31, 0x5d,
	0xae, 0xfb, 0xc1, 0xc7, 0xba, 0x7f, 0x96, 0x49, 0x3b, 0x9b, 0xc7, 0x54, 0x40, 0xe1, 0x63, 0xfd,
	0x32, 0x30, 0xc9, 0x33, 0xb3, 0xaf, 0x65, 0x6a, 0xe8, 0xad, 0xb2, 0x53, 0xdf, 0x1d, 0x3e, 0xe0,
	0x03, 0x91, 0x73, 0x59, 0xa4, 0xc9, 0xc8, 0xe1, 0x76, 0xfe, 0x85, 0xfb, 0x0b, 0x19, 0x4f, 0x97,
	0x15, 0x41, 0xab, 0x8a, 0xa0, 0xcf, 0x8a, 0xa0, 0xb7, 0x9a, 0x04, 0xab, 0x9a, 0x04, 0xef, 0x35,
	0x09, 0x1e, 0xaf, 0x7e, 0x01, 0x27, 0x77, 0x93, 0xfb, 0x82, 0x6b, 0x7b, 0x0d, 0xca, 0x6a, 0x2e,
	0x2c, 0x73, 0x23, 0x18, 0x34, 0x6f, 0x67, 0x8b, 0x76, 0x66, 0x4d, 0x4c, 0xdc, 0x69, 0xbe, 0xef,
	0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x86, 0xa1, 0xaf, 0xf7, 0xd2, 0x01, 0x00, 0x00,
}

func (m *AirdropAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClaimedAmount.Size()
		i -= size
		if _, err := m.ClaimedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAllocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AirdropAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovAllocation(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovAllocation(uint64(l))
	return n
}

func sovAllocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocation(x uint64) (n int) {
	return sovAllocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AirdropAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocation = fmt.Errorf("proto: unexpected end of group")
)
